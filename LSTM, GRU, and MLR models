import numpy as np
import pandas as pd
Green_Hydrogen= '/kaggle/input/daily-ghp/GHP.csv'
add Codeadd Markdown
data= pd.read_csv(Green_Hydrogen,sep='|', parse_dates=[' Date       '])
data.columns
Index(['Unnamed: 0', ' Date       ', ' Solar Irradiance (W/m^2) ',
       ' Wind Speed (m/s) ', ' Electrolyzer Efficiency (%) ',
       ' Electricity Generation (kWh) ', ' Hydrogen Production (kg) ',
       'Unnamed: 7'],
      dtype='object')
add Codeadd Markdown
data['day']=data[' Date       '].dt.day
data['month']=data[' Date       '].dt.month
data['year']= data[' Date       '].dt.year
data.set_index(' Date       ',inplace=True, drop=True)
data.drop(columns=['Unnamed: 0','Unnamed: 7'],inplace=True)
data.info()
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 30 entries, 2024-04-01 to 2024-04-30
Data columns (total 8 columns):
 #   Column                          Non-Null Count  Dtype  
---  ------                          --------------  -----  
 0    Solar Irradiance (W/m^2)       30 non-null     int64  
 1    Wind Speed (m/s)               30 non-null     float64
 2    Electrolyzer Efficiency (%)    30 non-null     int64  
 3    Electricity Generation (kWh)   30 non-null     int64  
 4    Hydrogen Production (kg)       30 non-null     int64  
 5   day                             30 non-null     int32  
 6   month                           30 non-null     int32  
 7   year                            30 non-null     int32  
dtypes: float64(1), int32(3), int64(4)
memory usage: 1.8 KB
add Codeadd Markdown
#data_exploration
data.info()
data.plot(subplots=True)
data.describe()
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 30 entries, 2024-04-01 to 2024-04-30
Data columns (total 8 columns):
 #   Column                          Non-Null Count  Dtype  
---  ------                          --------------  -----  
 0    Solar Irradiance (W/m^2)       30 non-null     int64  
 1    Wind Speed (m/s)               30 non-null     float64
 2    Electrolyzer Efficiency (%)    30 non-null     int64  
 3    Electricity Generation (kWh)   30 non-null     int64  
 4    Hydrogen Production (kg)       30 non-null     int64  
 5   day                             30 non-null     int32  
 6   month                           30 non-null     int32  
 7   year                            30 non-null     int32  
dtypes: float64(1), int32(3), int64(4)
memory usage: 1.8 KB
Solar Irradiance (W/m^2)	Wind Speed (m/s)	Electrolyzer Efficiency (%)	Electricity Generation (kWh)	Hydrogen Production (kg)	day	month	year
count	30.000000	30.000000	30.000000	30.000000	30.000000	30.000000	30.0	30.0
mean	314.333333	7.373333	90.900000	2275.000000	227.500000	15.500000	4.0	2024.0
std	89.237511	2.166506	9.678807	440.170422	44.017042	8.803408	0.0	0.0
min	150.000000	4.000000	74.000000	1550.000000	155.000000	1.000000	4.0	2024.0
25%	242.500000	5.550000	84.250000	1912.500000	191.250000	8.250000	4.0	2024.0
50%	315.000000	7.350000	91.500000	2275.000000	227.500000	15.500000	4.0	2024.0
75%	387.500000	9.150000	98.750000	2637.500000	263.750000	22.750000	4.0	2024.0
max	460.000000	11.000000	106.000000	3000.000000	300.000000	30.000000	4.0	2024.0

add Codeadd Markdown
.3f
correlation= data.corr()
import seaborn as sns
sns.heatmap(correlation, annot=True, fmt=".3f")
<Axes: >

add Codeadd Markdown
,
#define features as x and y as target
data['Target']= data[' Hydrogen Production (kg) '].shift(-1)
data.dropna(inplace=True)
x=  data.drop(['month','year','Target',' Hydrogen Production (kg) '], axis=1).values
y= data['Target'].values
​
#split data into train and test
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test= train_test_split(x,y,test_size=0.2,random_state=42)
data.head()
Solar Irradiance (W/m^2)	Wind Speed (m/s)	Electrolyzer Efficiency (%)	Electricity Generation (kWh)	Hydrogen Production (kg)	day	month	year	Target
Date									
2024-04-01	150	4.2	75	1600	160	1	4	2024	170.0
2024-04-02	200	4.5	76	1700	170	2	4	2024	155.0
2024-04-03	180	4.0	74	1550	155	3	4	2024	165.0
2024-04-04	190	4.3	77	1650	165	4	4	2024	175.0
2024-04-05	210	4.8	78	1750	175	5	4	2024	180.0
add Codeadd Markdown
pe
#normalize data within 0:1 range
from sklearn.preprocessing import MinMaxScaler
x_scaler=MinMaxScaler(feature_range=(0,1))
y_scaler=MinMaxScaler(feature_range=(0,1))
​
#fit scaler
x_train= x_scaler.fit_transform(x_train)
x_test= x_scaler.fit_transform(x_test)
y_train= y_scaler.fit_transform(y_train.reshape(-1,1))
y_test= y_scaler.fit_transform(y_test.reshape(-1,1))
​
x_train.shape, x_test.shape, y_train.shape, y_test.shape
((23, 5), (6, 5), (23, 1), (6, 1))
add Codeadd Markdown
#predict hydrogen production using linear regression
from sklearn.linear_model import LinearRegression 
mlr= LinearRegression(copy_X= True, fit_intercept= True, n_jobs= True, positive= False)
mlr.fit(x_train, y_train)
y_pred= mlr.predict(x_test)
​
#inverse transform y to get the original value
y_pred_inverse= y_scaler.inverse_transform(y_pred)
y_test_inverse= y_scaler.inverse_transform(y_test)
​
#evaluate the prediction
from sklearn.metrics import r2_score, mean_absolute_percentage_error
r2= r2_score(y_pred_inverse,y_test_inverse)
mape= mean_absolute_percentage_error(y_pred_inverse,y_test_inverse)*100
​
print('R2= %0.2f'%r2, "MAPE=%.2f "%mape)
R2= 0.97 MAPE=2.12 
add Codeadd Markdown
#reshape the input
x_train= np.reshape(x_train, (x_train.shape[0], x_test.shape[1],1))
x_test= np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))
​
x_train.shape, x_test.shape
((23, 5, 1), (6, 5, 1))
add Codeadd Markdown
2
#Build LSTM model
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, LSTM
#from keras.optimizer import Adam
​
model= Sequential()
model.add(LSTM(100, input_shape=(x_train.shape[1],x_train.shape[2])))
model.add(Dense(1))
model.compile(optimizer='Adam', loss='mse')
model.fit(x_train, y_train, batch_size=512, epochs=100,
          callbacks=[tf.keras.callbacks.EarlyStopping('val_loss', patience=3)])
lstm_pred= model.predict(x_test)
​
#evaluate model
lstm_pred_inverse= y_scaler.inverse_transform(lstm_pred)
y_test_inverse=y_scaler.inverse_transform(y_test)
​
r2_lstm= r2_score(lstm_pred_inverse,y_test_inverse)
mape_lstm= mean_absolute_percentage_error(lstm_pred_inverse,y_test_inverse)*100
print("R-squared= %f"%r2_lstm, "MAPE= %f"%mape_lstm)
Epoch 1/100
/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(**kwargs)
1/1 ━━━━━━━━━━━━━━━━━━━━ 2s 2s/step - loss: 0.3001
Epoch 2/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 59ms/step - loss: 0.2666
Epoch 3/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.2348
Epoch 4/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.2046
Epoch 5/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 59ms/step - loss: 0.1761
Epoch 6/100
/opt/conda/lib/python3.10/site-packages/keras/src/callbacks/early_stopping.py:156: UserWarning: Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss
  current = self.get_monitor_value(logs)
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 63ms/step - loss: 0.1493
Epoch 7/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 0.1242
Epoch 8/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.1009
Epoch 9/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.0795
Epoch 10/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.0602
Epoch 11/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0434
Epoch 12/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0292
Epoch 13/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0180
Epoch 14/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 35ms/step - loss: 0.0103
Epoch 15/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0062
Epoch 16/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0059
Epoch 17/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.0087
Epoch 18/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 63ms/step - loss: 0.0135
Epoch 19/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 0.0187
Epoch 20/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.0225
Epoch 21/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 37ms/step - loss: 0.0240
Epoch 22/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0231
Epoch 23/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.0204
Epoch 24/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0167
Epoch 25/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 37ms/step - loss: 0.0129
Epoch 26/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 57ms/step - loss: 0.0094
Epoch 27/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0068
Epoch 28/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0050
Epoch 29/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 64ms/step - loss: 0.0041
Epoch 30/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 59ms/step - loss: 0.0039
Epoch 31/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 0.0042
Epoch 32/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0048
Epoch 33/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.0055
Epoch 34/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.0062
Epoch 35/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0066
Epoch 36/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 0.0069
Epoch 37/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 29ms/step - loss: 0.0069
Epoch 38/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0066
Epoch 39/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0062
Epoch 40/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0056
Epoch 41/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 35ms/step - loss: 0.0049
Epoch 42/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 0.0043
Epoch 43/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0036
Epoch 44/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 59ms/step - loss: 0.0031
Epoch 45/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 35ms/step - loss: 0.0027
Epoch 46/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 0.0024
Epoch 47/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 0.0023
Epoch 48/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 0.0023
Epoch 49/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.0024
Epoch 50/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 49ms/step - loss: 0.0025
Epoch 51/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 43ms/step - loss: 0.0026
Epoch 52/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 0.0026
Epoch 53/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 0.0026
Epoch 54/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 0.0025
Epoch 55/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0023
Epoch 56/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 0.0021
Epoch 57/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 0.0019
Epoch 58/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0017
Epoch 59/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0016
Epoch 60/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0014
Epoch 61/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 59ms/step - loss: 0.0014
Epoch 62/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0014
Epoch 63/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0014
Epoch 64/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0014
Epoch 65/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 0.0014
Epoch 66/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0014
Epoch 67/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0013
Epoch 68/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0013
Epoch 69/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0012
Epoch 70/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0012
Epoch 71/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0011
Epoch 72/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0010
Epoch 73/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 9.9936e-04
Epoch 74/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 9.6544e-04
Epoch 75/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 9.4493e-04
Epoch 76/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 9.3516e-04
Epoch 77/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 9.3190e-04
Epoch 78/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 9.3054e-04
Epoch 79/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 9.2711e-04
Epoch 80/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 9.1911e-04
Epoch 81/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 9.0581e-04
Epoch 82/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 8.8815e-04
Epoch 83/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 8.6821e-04
Epoch 84/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 8.4855e-04
Epoch 85/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 8.3144e-04
Epoch 86/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 35ms/step - loss: 8.1839e-04
Epoch 87/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 8.0992e-04
Epoch 88/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 58ms/step - loss: 8.0555e-04
Epoch 89/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 8.0409e-04
Epoch 90/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 8.0404e-04
Epoch 91/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 8.0399e-04
Epoch 92/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 8.0290e-04
Epoch 93/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 8.0029e-04
Epoch 94/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 35ms/step - loss: 7.9624e-04
Epoch 95/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 7.9128e-04
Epoch 96/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 7.8616e-04
Epoch 97/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 7.8163e-04
Epoch 98/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 7.7824e-04
Epoch 99/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 7.7624e-04
Epoch 100/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 7.7552e-04
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 179ms/step
R-squared= 0.995010 MAPE= 0.827583
add Codeadd Markdown
y
y_test.shape
(6, 1)
add Codeadd Markdown
,y_test_inverse
#Build GRU model
from keras.layers import GRU
model= Sequential()
model = Sequential()
model.add(GRU(100, input_shape=(x_train.shape[1], x_train.shape[2])))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')
​
# Train the model
model.fit(x_train, y_train, epochs=100, batch_size=512)
gru_pred= model.predict(x_test)
​
#Evaluate_model
gru_pred_inverse= y_scaler.inverse_transform(gru_pred)
y_test_inverse= y_scaler.inverse_transform(y_test)
​
r2_gru= r2_score(gru_pred_inverse,y_test_inverse)
mape_gru= mean_absolute_percentage_error(gru_pred_inverse,y_test_inverse)
​
print("R_squared= %f"%r2_gru, "MAPE=%f"%mape_gru)
Epoch 1/100
/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(**kwargs)
1/1 ━━━━━━━━━━━━━━━━━━━━ 2s 2s/step - loss: 0.4056
Epoch 2/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 0.3436
Epoch 3/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 0.2871
Epoch 4/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.2358
Epoch 5/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.1897
Epoch 6/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.1489
Epoch 7/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.1133
Epoch 8/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0831
Epoch 9/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0582
Epoch 10/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 0.0390
Epoch 11/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 63ms/step - loss: 0.0253
Epoch 12/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0172
Epoch 13/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 65ms/step - loss: 0.0144
Epoch 14/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0161
Epoch 15/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.0211
Epoch 16/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0273
Epoch 17/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0329
Epoch 18/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 0.0362
Epoch 19/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 0.0368
Epoch 20/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 63ms/step - loss: 0.0348
Epoch 21/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 0.0310
Epoch 22/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 0.0262
Epoch 23/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0213
Epoch 24/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0168
Epoch 25/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0132
Epoch 26/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 0.0106
Epoch 27/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 0.0089
Epoch 28/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 37ms/step - loss: 0.0081
Epoch 29/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 59ms/step - loss: 0.0080
Epoch 30/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0083
Epoch 31/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0088
Epoch 32/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.0093
Epoch 33/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0098
Epoch 34/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0101
Epoch 35/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0102
Epoch 36/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 0.0100
Epoch 37/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.0096
Epoch 38/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 0.0089
Epoch 39/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0082
Epoch 40/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 35ms/step - loss: 0.0073
Epoch 41/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 36ms/step - loss: 0.0064
Epoch 42/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 36ms/step - loss: 0.0056
Epoch 43/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 56ms/step - loss: 0.0048
Epoch 44/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 0.0042
Epoch 45/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0038
Epoch 46/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 0.0035
Epoch 47/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 0.0033
Epoch 48/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 0.0033
Epoch 49/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 0.0032
Epoch 50/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0033
Epoch 51/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 0.0033
Epoch 52/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 0.0032
Epoch 53/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 42ms/step - loss: 0.0031
Epoch 54/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 47ms/step - loss: 0.0029
Epoch 55/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 0.0027
Epoch 56/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 0.0024
Epoch 57/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0022
Epoch 58/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0019
Epoch 59/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 0.0017
Epoch 60/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 0.0016
Epoch 61/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0014
Epoch 62/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 0.0014
Epoch 63/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 40ms/step - loss: 0.0013
Epoch 64/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 63ms/step - loss: 0.0013
Epoch 65/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 0.0013
Epoch 66/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 37ms/step - loss: 0.0013
Epoch 67/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 0.0012
Epoch 68/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 0.0012
Epoch 69/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 37ms/step - loss: 0.0011
Epoch 70/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 0.0011
Epoch 71/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 64ms/step - loss: 9.9700e-04
Epoch 72/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 59ms/step - loss: 9.3163e-04
Epoch 73/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 36ms/step - loss: 8.7400e-04
Epoch 74/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 8.2806e-04
Epoch 75/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 35ms/step - loss: 7.9562e-04
Epoch 76/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 7.7626e-04
Epoch 77/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 7.6763e-04
Epoch 78/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 56ms/step - loss: 7.6615e-04
Epoch 79/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 7.6782e-04
Epoch 80/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 7.6907e-04
Epoch 81/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 7.6739e-04
Epoch 82/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 62ms/step - loss: 7.6167e-04
Epoch 83/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 7.5215e-04
Epoch 84/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 60ms/step - loss: 7.4015e-04
Epoch 85/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 7.2756e-04
Epoch 86/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 7.1627e-04
Epoch 87/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 7.0777e-04
Epoch 88/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 35ms/step - loss: 7.0283e-04
Epoch 89/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 7.0142e-04
Epoch 90/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 61ms/step - loss: 7.0287e-04
Epoch 91/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 7.0607e-04
Epoch 92/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 35ms/step - loss: 7.0978e-04
Epoch 93/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 32ms/step - loss: 7.1293e-04
Epoch 94/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 7.1480e-04
Epoch 95/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 7.1512e-04
Epoch 96/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 7.1403e-04
Epoch 97/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 30ms/step - loss: 7.1199e-04
Epoch 98/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 33ms/step - loss: 7.0960e-04
Epoch 99/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 34ms/step - loss: 7.0746e-04
Epoch 100/100
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 31ms/step - loss: 7.0598e-04
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 208ms/step
R_squared= 0.998060 MAPE=0.005222
